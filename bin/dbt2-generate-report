#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2006-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.
#

usage() {
	echo "usage: `basename $0` -h"
	echo "usage: `basename $0` -i <directory> [-o <directory>] [-b devices]"
	echo "options:"
	echo "       -b <comma delimited list of block devices (default: all devices)>"
	echo "       -i <DBT-2 test output directory>"
	echo "       -o <DBT-2 report directory (default: test output directory)>"
}

error() {
	echo "ERROR: $@"
	exit 1
}

warning() {
	echo "WARNING: $@"
}

create_html_stat_page()
{
	local TITLE=$1
	local TAG=$2
	local DIR=$3
	local FILE=$4

	cat > $FILE << __EOF__
<html>
<head>
<title>Database Test 2 $TITLE $TAG Charts</title>
</head>
<body>
__EOF__

	SARDIR=`dirname $FILE`
	local CPUCHARTS=`(cd $DIR && find $SARDIR -name "sar-$TAG*.png")`
	for CHART in $CPUCHARTS; do
		cat >> $FILE << __EOF__
`basename $CHART`
<img src="$CHART" width="90%" />
<hr />
__EOF__
	done

	cat >> $FILE << __EOF__
</body>
</html>
__EOF__
}

while getopts "b:hi:o:" opt; do
	case $opt in
	b)
		BLKDEVICES=${OPTARG}
		;;
	h)
		usage
		exit 1
		;;
	i)
		INDIR=${OPTARG}
        MIXLOG=${INDIR}/mix.log
		;;
	o)
		OUTDIR=${OPTARG}
		;;
	esac
done

if [ "x$INDIR" = "x" ]; then
	error "DBT-2 results directory was not specified"
	usage
	exit 1
fi

if [ "x$OUTDIR" = "x" ]; then
	OUTDIR=$INDIR
fi

DBMS=`grep RDBMS $INDIR/readme.txt | cut -d " " -f 2`
if [ "x$DBMS" = "x" ]; then
	error "Could not determine what RDBMS used from results"
fi

DBNAME=`grep "Database Name" $INDIR/readme.txt | cut -d " " -f 3`
if [ "x$DBNAME" = "x" ]; then
	warning "Could not determine what the database name used from results"
fi

echo "Generating transaction distribution charts..."
mkdir -p ${OUTDIR}/txn || exit 1
dbt-plot-transaction-distribution Delivery d ${MIXLOG} ${OUTDIR}/txn 1 \
		|| warning "Could not create Delivery response time distribution char"
dbt-plot-transaction-distribution "New Order" n ${MIXLOG} ${OUTDIR}/txn 2 \
		|| warning "Could not create New Order response time distribution char"
dbt-plot-transaction-distribution "Order Status" o ${MIXLOG} ${OUTDIR}/txn 3 \
		|| warning "Could not create Order Status response time distribution char"
dbt-plot-transaction-distribution "Payments" p ${MIXLOG} ${OUTDIR}/txn 4 \
		|| warning "Could not create Payments response time distribution char"
dbt-plot-transaction-distribution "Stock Level" s ${MIXLOG} ${OUTDIR}/txn 5 \
		|| warning "Could not create Stock Level response time distribution char"

mkdir -p ${OUTDIR}/db/sar || exit 1

echo "Generating sar io charts..."
for SARBLOCKDEVFILE in `find $INDIR -name sar-blockdev.csv`; do
	DIRNAME=`dirname $SARBLOCKDEVFILE`
	mkdir -p $DIRNAME/sar
	dbt-plot-sar-blockdev $SARBLOCKDEVFILE $DIRNAME/sar \
			$BLKDEVICES > /dev/null 2>&1 \
			|| warning "Could not create sar blockdev charts"
done

echo "Generating processor utilization charts..."
for SARCPUFILE in `find $INDIR -name sar-cpu.csv`; do
	DIRNAME=`dirname $SARCPUFILE`
	mkdir -p $DIRNAME/sar
	dbt-plot-sar-cpu $SARCPUFILE $DIRNAME/sar > /dev/null 2>&1 \
			|| warning "Could not create sar cpu charts from $SARCPUFILE"
done

echo "Generating swap charts..."
for SARSWAPFILE in `find $INDIR -name sar-swap.csv`; do
	DIRNAME=`dirname $SARSWAPFILE`
	mkdir -p $DIRNAME/sar
	dbt-plot-sar-swap $SARSWAPFILE $DIRNAME/sar > /dev/null 2>&1 \
			|| warning "Could not create sar swap charts from $SARSWAPFILE"
done

echo "Generating network charts..."
for SARNETFILE in `find $INDIR -name sar-net.csv`; do
	DIRNAME=`dirname $SARNETFILE`
	mkdir -p $DIRNAME/sar
	dbt-plot-sar-net $SARNETFILE $DIRNAME/sar > /dev/null 2>&1 \
			|| warning "Could not create sar net charts from $SARNETFILE"
done

echo "Generating transaction rate charts..."
dbt2-plot-transaction-rate ${MIXLOG} ${OUTDIR}/txn \
		|| warning "Could not create transaction rate charts"

echo "Generating database statistics charts..."
if [ "${DBMS}" = "pgsql" ]; then
	export PGDATABASE=$DBNAME
	TABLEDIR=$OUTDIR/db/table
	INDEXDIR=$OUTDIR/db/indexes

	mkdir -p $TABLEDIR || exit 1
	mkdir -p $INDEXDIR || exit 1

	dbt-pgsql-plot-database-stats ${INDIR}/db/pg_stat_databases.csv $DBNAME \
			$OUTDIR/db || warning "Could not create database stats charts"
	for TABLENAME in `cat ${INDIR}/db/table-list.txt`; do
		dbt-pgsql-plot-table-stats ${INDIR}/db/pg_stat_tables.csv \
				$TABLENAME $TABLEDIR \
				> $TABLEDIR/r.log 2>&1 \
				|| warning "Could not create table stats charts for $TABLENAME"
	done
	for INDEXNAME in `cat ${INDIR}/db/index-list.txt`; do
		dbt-pgsql-plot-index-stats $INDIR/db/pg_stat_indexes.csv \
				$INDEXNAME $INDEXDIR > $INDEXDIR/r.log 2>&1 \
				|| warning "Could not create index stats charts for $INDEXNAME"
	done
elif [ "${DBMS}" = "mysql" ]; then
	warning "Charting for MySQL database statistics not implementd"
elif [ "${DMBS}" = "drizzle" ]; then
	warning "Charting for Drizzle database statistics not implementd"
elif [ "${DBMS}" = "sqlite" ]; then
	warning "Charting for SQLite database statistics not implementd"
else
	error "unrecognized dbms"
fi

DMIX=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $2}'`
DAVG=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $3}'`
D90P=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $5}'`
DTOT=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $6}'`
DROL=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $7}'`
DRPE=`grep Delivery ${INDIR}/report.txt | awk -F " " '{print $8}'`

NMIX=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $3}'`
NAVG=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $4}'`
N90P=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $6}'`
NTOT=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $7}'`
NROL=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $8}'`
NRPE=`grep "New Order" ${INDIR}/report.txt | awk -F " " '{print $9}'`

OMIX=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $3}'`
OAVG=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $4}'`
O90P=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $6}'`
OTOT=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $7}'`
OROL=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $8}'`
ORPE=`grep "Order Status" ${INDIR}/report.txt | awk -F " " '{print $9}'`

PMIX=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $2}'`
PAVG=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $3}'`
P90P=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $5}'`
PTOT=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $6}'`
PROL=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $7}'`
PRPE=`grep Payment ${INDIR}/report.txt | awk -F " " '{print $8}'`

SMIX=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $3}'`
SAVG=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $4}'`
S90P=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $6}'`
STOT=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $7}'`
SROL=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $8}'`
SRPE=`grep "Stock Level" ${INDIR}/report.txt | awk -F " " '{print $9}'`

OS=`head -n 1 ${INDIR}/db/readme.txt | cut -d " " -f 1`
OSVER=`head -n 1 ${INDIR}/db/readme.txt | cut -d " " -f 3`
ARCH=`head -n 1 ${INDIR}/db/readme.txt | cut -d " " -f 12`

DBOS=`head -n 1 $INDIR/db/readme.txt | cut -d " " -f 1`
DBOSVER=`head -n 1 $INDIR/db/readme.txt | cut -d " " -f 3`
DBARCH=`head -n 1 $INDIR/db/readme.txt | cut -d " " -f 12`

# cd into the driver directory because there will be one in the db subdir also
OSPROCFILE=`(cd $INDIR/driver && find */ -name proc.txt)`

cat > ${OUTDIR}/index.html << __EOF__
<html>
<head>
<title>Database Test 2 Report</title>
</head>
<body>
<h1>Database Test 2 Report</h1>

<p>
`head -n 1 ${INDIR}/readme.txt`
</p>

<table>

<tr>
<td>
<table>
<caption>Results Summary</caption>

<tr>
<td align="right">New Order Transactions per Minute (notpm):</td>
<td>`grep NOTPM ${INDIR}/report.txt | cut -d " " -f 1`</td>
</tr>

<tr>
<td align="right">Scale Factor:</td>
<td>`grep "Database Scale Factor" ${INDIR}/readme.txt | cut -d " " -f 4`</td>
</tr>

<tr>
<td align="right">Test Duration (sec):</td>
<td>`grep Duration ${INDIR}/readme.txt | cut -d " " -f 3`</td>

</tr>

</table>
</td>
<td>
  <a href="txn/n-transaction-rate.png">
    <img width="128" src="txn/n-transaction-rate.png" height="96" />
  </a>
</td>
</tr>

</table>

<table border="1">
<caption>Transaction Summary</caption>

<tr>
<th colspan="3">Transaction</th>
<th colspan="2">Response Time (seconds)</th>
<th colspan="2">Rollbacks</th>
<th colspan="2">Charts</th>
</tr>

<tr>
<th>Name</th>
<th>Mix %</th>
<th>Total</th>
<th>Average (s)</th>
<th>90th %</th>
<th>Total</th>
<th>%</th>
<th>Response Time</th>
<th>Time Distribution</th>
</tr>

<tr>
<td>Delivery</td>
<td align="right">${DMIX}</td>
<td align="right">${DTOT}</td>
<td align="right">${DAVG}</td>
<td align="right">${D90P}</td>
<td align="right">${DROL}</td>
<td align="right">${DRPE}</td>
<td align="center">
  <a href="txn/d-transaction-rate.png">
    <img width="128" src="txn/d-transaction-rate.png" height="96" />
  </a>
</td>
<td align="center">
  <a href="txn/td-distribution.png">
    <img width="128" src="txn/td-distribution.png" height="96" />
  </a>
</td>
</tr>

<tr>
<td>New Order</td>
<td align="right">${NMIX}</td>
<td align="right">${NTOT}</td>
<td align="right">${NAVG}</td>
<td align="right">${N90P}</td>
<td align="right">${NROL}</td>
<td align="right">${NRPE}</td>
<td align="center">
  <a href="txn/n-transaction-rate.png">
    <img width="128" src="txn/n-transaction-rate.png" height="96" />
  </a>
</td>
<td align="center">
  <a href="txn/tn-distribution.png">
    <img width="128" src="txn/tn-distribution.png" height="96" />
  </a>
</td>
</tr>

<tr>
<td>Order Status</td>
<td align="right">${OMIX}</td>
<td align="right">${OTOT}</td>
<td align="right">${OAVG}</td>
<td align="right">${O90P}</td>
<td align="right">${OROL}</td>
<td align="right">${ORPE}</td>
<td align="center">
  <a href="txn/o-transaction-rate.png">
    <img width="128" src="txn/o-transaction-rate.png" height="96" />
  </a>
</td>
<td align="center">
  <a href="txn/to-distribution.png">
    <img width="128" src="txn/to-distribution.png" height="96" />
  </a>
</td>
</tr>

<tr>
<td>Payment</td>
<td align="right">${PMIX}</td>
<td align="right">${PTOT}</td>
<td align="right">${PAVG}</td>
<td align="right">${P90P}</td>
<td align="right">${PROL}</td>
<td align="right">${PRPE}</td>
<td align="center">
  <a href="txn/p-transaction-rate.png">
    <img width="128" src="txn/p-transaction-rate.png" height="96" />
  </a>
</td>
<td align="center">
  <a href="txn/tp-distribution.png">
    <img width="128" src="txn/tp-distribution.png" height="96" />
  </a>
</td>
</tr>

<tr>
<td>Stock Level</td>
<td align="right">${SMIX}</td>
<td align="right">${STOT}</td>
<td align="right">${SAVG}</td>
<td align="right">${S90P}</td>
<td align="right">${SROL}</td>
<td align="right">${SRPE}</td>
<td align="center">
  <a href="txn/s-transaction-rate.png">
    <img width="128" src="txn/s-transaction-rate.png" height="96" />
  </a>
</td>
<td align="center">
  <a href="txn/ts-distribution.png">
    <img width="128" src="txn/ts-distribution.png" height="96" />
  </a>
</td>
</tr>

</table>

<table>
<caption>System Summary</caption>

<tr>
<td align="right">Driver System:</td>
<td>${OS} ${ARCH} ${OSVER}</td>
<!--
<td><a href="driver/$OSPROCFILE">OS Settings</a> |
    <a href="driver/cpu.html">CPU Charts</a> |
    <a href="db/blockdev.html">Blockdev Charts</a> |
    <a href="db/net.html">Network Charts</a> |
    <a href="db/swap.html">Swap Charts</a> |
</td>
-->
</tr>

<tr>
<td align="right">DBMS:</td>
<td>${DBOS} ${DBARCH} ${DBOSVER}</td>
<td>
  <a href="db/plan0.txt">Query Plans</a><br />
__EOF__

for HOST in $GTMHOST $HOSTNAMES; do
	cat >> $OUTDIR/index.html << __EOF__
  $HOST:
  <a href="db/$HOST/proc.txt">OS Settings</a> |
  <a href="db/$HOST/cpu.html">CPU Charts</a> |
  <a href="db/$HOST/blockdev.html">Blockdev Charts</a> |
  <a href="db/$HOST/net.html">Network Charts</a> |
  <a href="db/$HOST/swap.html">Swap Charts</a><br />
__EOF__
done

cat >> $OUTDIR/index.html << __EOF__
</td>
</tr>

<tr>
<td align="right">Notes:</td>
<td>`head -n 1 ${INDIR}/readme.txt`</td>
</tr>
</table>

<table>
<tr>
<td align="right">DB Table Stats Charts:</td>
<td>
__EOF__

for TABLE in `cat $INDIR/db/table-list.txt`; do
	cat >> $OUTDIR/index.html << __EOF__
<a href="db/$TABLE-charts.html">$TABLE</a>
__EOF__
done

cat >> $OUTDIR/index.html << __EOF__
</td>
</tr>

<tr>
<td align="right">DB Index Stats Charts:</td>
<td>
__EOF__

for INDEX in `cat $INDIR/db/index-list.txt`; do
	cat >> $OUTDIR/index.html << __EOF__
<a href="db/$INDEX-charts.html">$INDEX</a>
__EOF__
done

cat >> $OUTDIR/index.html << __EOF__
</td>
</tr>

<tr>
<td align="right">DB Table Stats by Metrics:</td>
<td>
__EOF__

TABLEMETRICS=`(cd $INDIR/db/table && ls *.png) | sed -e "s/table-stat-.*-//" \
		| sed -e "s/.png$//" | sort | uniq`

for METRIC in $TABLEMETRICS; do
	cat >> $OUTDIR/index.html << __EOF__
<a href="db/t_$METRIC-charts.html">$METRIC</a>
__EOF__
done

cat >> $OUTDIR/index.html << __EOF__
</td>
</tr>

<tr>
<td align="right">DB Index Stats by Metrics:</td>
<td>
__EOF__

INDEXMETRICS=`(cd $INDIR/db/indexes && ls *.png) \
		| sed -e "s/index-stat-.*-//" | sed -e "s/.png$//" | sort | uniq`

for METRIC in $INDEXMETRICS; do
	cat >> $OUTDIR/index.html << __EOF__
<a href="db/i_$METRIC-charts.html">$METRIC</a>
__EOF__
done

cat >> $OUTDIR/index.html << __EOF__
</td>
</tr>

</table>

</body>
</html>
__EOF__

# Create additional HTML pages for operating system charts.

for HOST in $GTMHOST $HOSTNAMES; do
	create_html_stat_page $HOST cpu $INDIR/db/$SYSTEM $INDIR/db/$HOST/cpu.html
	create_html_stat_page $HOST blockdev $INDIR/db/$HOST \
			$INDIR/db/$HOST/blockdev.html
	create_html_stat_page $HOST net $INDIR/db/$HOST $INDIR/db/$HOST/net.html
	create_html_stat_page $HOST swap $INDIR/db/$HOST $INDIR/db/$HOST/swap.html
done

# Create additional HTML pages for the database charts.

for TABLE in `cat $INDIR/db/table-list.txt`; do
	TABLECHARTFILE="$OUTDIR/db/$TABLE-charts.html"
	cat > $TABLECHARTFILE << __EOF__
<html>
<head>
<title>Database Test 2 $TABLE Table Charts</title>
</head>
<body>
__EOF__

	for CHART in `find $INDIR/db -name table-stat-$TABLE-*.png`; do
		cat >> $TABLECHARTFILE << __EOF__
<img src="table/`basename $CHART`" width="90%" />
__EOF__
	done

	cat >> $TABLECHARTFILE << __EOF__
</body>
</html>
__EOF__
done

for INDEX in `cat $INDIR/db/index-list.txt`; do
	INDEXCHARTFILE="$OUTDIR/db/$INDEX-charts.html"
	cat > $INDEXCHARTFILE << __EOF__
<html>
<head>
<title>Database Test 2 $INDEX Index Charts</title>
</head>
<body>
__EOF__

	for CHART in `find $INDIR/db -name index-stat-$INDEX-*.png`; do
		cat >> $INDEXCHARTFILE << __EOF__
<img src="indexes/`basename $CHART`" width="90%" />
__EOF__
	done

	cat >> $INDEXCHARTFILE << __EOF__
</body>
</html>
__EOF__
done

for METRIC in $TABLEMETRICS; do
	METRICCHARTFILE="$OUTDIR/db/t_$METRIC-charts.html"
	cat > $METRICCHARTFILE << __EOF__
<html>
<head>
<title>Database Test 2 Table $METRIC Charts</title>
</head>
<body>
__EOF__

	for TABLE in `cat $INDIR/db/table-list.txt`; do
		cat >> $METRICCHARTFILE << __EOF__
<img src="table/table-stat-$TABLE-$METRIC.png" width="90%" />
__EOF__
	done
done

for METRIC in $INDEXMETRICS; do
	METRICCHARTFILE="$OUTDIR/db/i_$METRIC-charts.html"
	cat > $METRICCHARTFILE << __EOF__
<html>
<head>
<title>Database Test 2 Index $METRIC Charts</title>
</head>
<body>
__EOF__

	for INDEX in `cat $INDIR/db/index-list.txt`; do
		cat >> $METRICCHARTFILE << __EOF__
<img src="indexes/index-stat-$INDEX-$METRIC.png" width="90%" />
__EOF__
	done
done

	cat >> $METRICCHARTFILE << __EOF__
</body>
</html>
__EOF__
